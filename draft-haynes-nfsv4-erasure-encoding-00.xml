<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<rfc
 category="std"
 docName="draft-haynes-nfsv4-erasure-encoding-00"
 ipr="trust200902"
 obsoletes=""
 scripts="Common,Latin"
 sortRefs="true"
 submissionType="IETF"
 symRefs="true"
 tocDepth="3"
 tocInclude="true"
 version="3"
 xml:lang="en">

<front>
  <title abbrev="erasure-encoding">
    Erasure Encoding of Files in NFSv4.2
  </title>
  <seriesInfo name="Internet-Draft" value="draft-haynes-nfsv4-erasure-encoding-00"/>
  <author fullname="Thomas Haynes" initials="T." surname="Haynes">
    <organization abbrev="Hammerspace">Hammerspace</organization>
    <address>
      <email>loghyr@hammerspace.com</email>
    </address>
  </author>
  <date year="2024" month="September" day="26"/>
  <area>Transport</area>
  <workgroup>Network File System Version 4</workgroup>
  <keyword>NFSv4</keyword>
  <abstract>
    <t>
    </t>
  </abstract>

  <note removeInRFC="true">
    <t>
      Discussion of this draft takes place
      on the NFSv4 working group mailing list (nfsv4@ietf.org),
      which is archived at
      <eref target="https://mailarchive.ietf.org/arch/browse/nfsv4/"/>.
      Working Group information can be found at
      <eref target="https://datatracker.ietf.org/wg/nfsv4/about/"/>.
    </t>
  </note>
</front>

<middle>

<section anchor="sec_intro" numbered="true" removeInRFC="false" toc="default">
  <name>Introduction</name>
  <t>
  </t>

  <t>
    Using the process detailed in <xref target="RFC8178" format="default"
    sectionFormat="of"/>, the revisions in this document become an
    extension of NFSv4.2 <xref target="RFC7862" format="default"
    sectionFormat="of"/>. They are built on top of the external data
    representation (XDR) <xref target="RFC4506" format="default"
    sectionFormat="of"/> generated from <xref target="RFC7863"
    format="default" sectionFormat="of"/>.
  </t>

  <section anchor="sec_defs" numbered="true" removeInRFC="false" toc="default">
    <name>Definitions</name>
    <dl newline="false" spacing="normal">
      <dt>Client Side Mirroring:</dt>
      <dd>
        A file based replication method where copies are maintained
        in parallel.
      </dd>
    </dl>
  </section>

  <section numbered="true" removeInRFC="false" toc="default">
    <name>Requirements Language</name>
    <t>
      The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
      "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
      NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
      "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
      "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this
      document are to be interpreted as described in BCP&nbsp;14 <xref
      target="RFC2119" format="default" sectionFormat="of"/> <xref
      target="RFC8174" format="default" sectionFormat="of"/> when,
      and only when, they appear in all capitals, as shown here.
    </t>
  </section>
</section>

<section anchor="sec_erasure_encoding" numbered="true" removeInRFC="false" toc="default">
  <name>Erasure Encoding</name>
  <t>
  </t>
</section>

<section anchor="WRITE_LOG" numbered="true" removeInRFC="false" toc="default">
  <name>WRITE_LOG</name>
  <t>
  </t>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct block_owner4 {
///     changeid4   bo_change_id;
///     clientid4   bo_client_id;
///     bool        bo_logged;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct write_block4 {
///     uint32_t        wb_num;
///     uint32_t        wb_crc;
///     eff_block_len4  wb_effective_len;
///     opaque          wb_block<>;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct WRITE_LOG4args {
///     /* CURRENT_FH: file */
///     stateid4        wla_stateid;
///     offset4         wla_offset;
///     stable_how4     wla_stable;
///     block_owner4    wla_owner;
///     write_block4    wla_data<>; 
};
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
struct WRITE_LOGGED4resok {
///     count4          wlr_count;  
///     stable_how4     wlr_committed;
///     verifier4       wlr_writeverf;
///     block_owner4    wlr_owners<>; 
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
    /// union WRITE_LOG4res switch (nfsstat4 wlr_status) {
    ///     case NFS4_OK:
    ///         WRITE_LOG4resok    wlr_resok4;
    ///     default:
    ///         void;
    /// };
]]>
  </sourcecode>
</section>

<section anchor="READ_LOG" numbered="true" removeInRFC="false" toc="default">
  <name>READ_LOG</name>
  <t>
  </t>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct READ_LOG4args {
///     /* CURRENT_FH: file */
///     stateid4    rla_stateid;
///     offset4     rla_offset;
///     count4      rla_count;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct read_block4 {
///     uint32_t        rb_num;
///     uint32_t        rb_crc;
///     eff_block_len4  rb_effective_len;
///     block_owner4    rb_owner;
///     opaque          rb_block<>;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct READ_LOG4resok {
///     bool        rlr_eof;
///     read_block4 rlr_blocks<>;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// union READ_LOG4res switch (nfsstat4 rlr_status) {
///     case NFS4_OK:
///          READ_LOG4resok     resok4;
///     default:
///          void;
/// };
]]>
  </sourcecode>
</section>

<section anchor="READ_BLOCK_LOG" numbered="true" removeInRFC="false" toc="default">
  <name>READ_BLOCK_LOG</name>
  <t>
  </t>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct READ_BLOCK_LOG4args {
///     /* CURRENT_FH: file */
///     stateid4    rbla_stateid;
///     offset4     rbla_offset;
///     count4      rbla_count;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct read_block_log4 {
///     uint32_t        rbl_num;
///     block_owner4    rbl_owner;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct READ_BLOCK_LOG4resok {
///     bool            rblr_eof;
///     read_block_log4 rblr_blocks<>;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// union READ_BLOCK_LOG4res switch (nfsstat4 rblr_status) {
///     case NFS4_OK:
///         READ_LOG4resok     resok4;
///     default:
///         void;
/// };
]]>
  </sourcecode>
</section>

<section anchor="COMMIT_LOG" numbered="true" removeInRFC="false" toc="default">
  <name>COMMIT_LOG</name>
  <t>
  </t>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct commit_block4 {
///     uint32_t        cb_num;
///     block_owner4    cb_owner;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct COMMIT_LOG4args {
///     /* CURRENT_FH: file */
///     offset4         cpa_offset;
///     count4          cpa_count;    // Block counts or data length?
///     commit_block4   cpa_blocks<>;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// struct COMMIT_LOG4resok {
///     verifier4       writeverf;
/// };
]]>
  </sourcecode>

  <sourcecode name="" type="" markers="true"><![CDATA[
/// union COMMIT_LOG4res switch (nfsstat4 cpr_status) {
///     case NFS4_OK:
///         COMMIT_LOG4resok   resok4;
///     default:
///         void;
/// };
]]>
  </sourcecode>
</section>


<section anchor="xdr_desc" numbered="true" removeInRFC="false" toc="default">
  <name>Extraction of XDR</name>
  <t>
    This document contains the external data representation (XDR)
    <xref target="RFC4506" format="default" sectionFormat="of"/> description of the uncacheable
    attribute.
    The XDR description is embedded in this
    document in a way that makes it simple for the reader to extract
    into a ready-to-compile form.  The reader can feed this document
    into the following shell script to produce the machine readable
    XDR description of the new flags:
  </t>
  <sourcecode name="" type="" markers="true"><![CDATA[
#!/bin/sh
grep '^ *///' $* | sed 's?^ */// ??' | sed 's?^ *///$??'
    ]]>
  </sourcecode>
  <t>
    That is, if the above script is stored in a file called "extract.sh", and
    this document is in a file called "spec.txt", then the reader can do:
  </t>
  <sourcecode name="" type="" markers="true"><![CDATA[
sh extract.sh < spec.txt > erasure_coding_prot.x
    ]]>
  </sourcecode>
  <t>
    The effect of the script is to remove leading white space from each
    line, plus a sentinel sequence of "///".  XDR descriptions with the
    sentinel sequence are embedded throughout the document.
  </t>
  <t>
    Note that the XDR code contained in this document depends on types
    from the NFSv4.2 nfs4_prot.x file (generated from
    <xref target="RFC7863" format="default" sectionFormat="of"/>)
    and the Flex Files Layout Type flexfiles.x file (generated from
    <xref target="RFC8435" format="default" sectionFormat="of"/>).
    This includes both nfs types that end with a 4, such as offset4,
    length4, etc., as well as more generic types such as uint32_t and
    uint64_t.
  </t>
  <t>
    While the XDR can be appended to that from
    <xref target="RFC7863" format="default" sectionFormat="of"/>,
    the various code snippets belong in their respective areas of
    that XDR.
  </t>
</section>

<section anchor="sec_security" numbered="true" removeInRFC="false" toc="default">
  <name>Security Considerations</name>
  <t>
  </t>
</section>

<section anchor="sec_iana" numbered="true" removeInRFC="false" toc="default">
  <name>IANA Considerations</name>
  <t>
    There are no IANA considerations.
  </t>
</section>

</middle>

<back>

<references>
  <name>References</name>

  <references>
  <name>Normative References</name>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4506.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7862.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7863.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8178.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8435.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8881.xml"/>
  </references>
</references>

<section numbered="true" removeInRFC="false" toc="default">
  <name>Acknowledgments</name>
  <t>
    The following from Hammerspace were instrumental in driving
    Flex Files v2: David Flynn, Trond Myklebust, Tom Haynes, Didier Feron,
    Jean-Pierre Monchanin, Pierre Evenou, and Brian Pawlowski.
  </t>
  <t>
    Christoph Helwig was instrumental in making sure Flex Files v2
    was applicable to more than the Mojette Transformation.
  </t>
  <t>
    Pierre Evenou provided the sections for the Mojette Transformation.
  </t>
</section>

</back>

</rfc>
